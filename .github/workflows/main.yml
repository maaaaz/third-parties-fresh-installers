name: Fresh package build

on: 
  workflow_dispatch

jobs:
  build_pkg:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        
    - name: Install prerequisites
      run: |
        cd /tmp/
        FRESH_INSTALLERS_DIR="/tmp/third-parties-fresh-installers/"
        FRESH_INSTALLERS_ZIP="/tmp/third-parties-fresh-installers.zip"
        echo "FRESH_INSTALLERS_DIR=$FRESH_INSTALLERS_DIR" >> $GITHUB_ENV
        echo "FRESH_INSTALLERS_ZIP=$FRESH_INSTALLERS_ZIP" >> $GITHUB_ENV
        
        echo "$FRESH_INSTALLERS_DIR"
        
        mkdir -p "$FRESH_INSTALLERS_DIR"
        
        git clone https://github.com/maaaaz/patchmypcdl.git
        git clone https://github.com/maaaaz/chocodl.git
        pip install -r ./patchmypcdl/requirements.txt

    - name: Download files
      run: |
        cd /tmp/
        python -Wall /tmp/patchmypcdl/patchmypcdl.py -i "$GITHUB_WORKSPACE/_Resources/patchmypc_inputs.txt"

        wget --force-directories -nv "https://www.apple.com/itunes/download/win64" -O "/tmp/third-parties-fresh-installers/Apple iTunes/iTunes64Setup.exe"
        
    - name: List files
      run: |
        du -sh "$FRESH_INSTALLERS_DIR"
        find "$FRESH_INSTALLERS_DIR" -type f | sort

    - name: Create zip
      run: |
        zip -r "$FRESH_INSTALLERS_ZIP" "$FRESH_INSTALLERS_DIR"
        ls -alh "$FRESH_INSTALLERS_ZIP"
        
    - name: Push to archive.org
      env:   
        SECRET_ARCHIVE_ORG_LOGIN: ${{ secrets.SECRET_ARCHIVE_ORG_LOGIN }}
        SECRET_ARCHIVE_ORG_PASSWORD: ${{ secrets.SECRET_ARCHIVE_ORG_PASSWORD }}
      run: |
        set -xe

        cd $LIVE_BUILD_IMAGES_DIR
        # /tmp/ia configure --username=$SECRET_ARCHIVE_ORG_LOGIN --password=$SECRET_ARCHIVE_ORG_PASSWORD

        # /tmp/ia upload -q $KALI_RELEASE_NAME $KALI_RELEASE_ISO_FNAME --metadata="mediatype:software"
        # /tmp/ia upload -q $KALI_RELEASE_NAME $KALI_RELEASE_LOG_FNAME --metadata="mediatype:texts"
        # /tmp/ia upload -q $KALI_RELEASE_NAME $KALI_RELEASE_ISO_SHA256SUM_FNAME --metadata="mediatype:texts"

        # KALI_RELEASE_NOTES="/tmp/$KALI_RELEASE_NAME-notes.txt"
        # echo "KALI_RELEASE_NOTES=$KALI_RELEASE_NOTES" >> $GITHUB_ENV
        # echo -e "Download the ISO file at https://archive.org/details/$KALI_RELEASE_NAME\n" > $KALI_RELEASE_NOTES
        # cat $KALI_RELEASE_ISO_SHA256SUM_FNAME_PATH >> $KALI_RELEASE_NOTES
